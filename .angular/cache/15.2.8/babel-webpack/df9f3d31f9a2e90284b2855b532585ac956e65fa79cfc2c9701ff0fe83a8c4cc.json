{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nlet ProdutosService = class ProdutosService {\n  constructor(http, toastr, router) {\n    this.http = http;\n    this.toastr = toastr;\n    this.router = router;\n    this.URL = 'http://localhost:3000/produtos';\n  }\n  buscarTodos() {\n    return this.http.get(this.URL).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  buscarPorId(id) {\n    return this.http.get(`${this.URL}/${id}`).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  cadastrar(produto) {\n    return this.http.post(this.URL, produto).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  atualizar(produto) {\n    return this.http.put(`${this.URL}/${produto.id}`, produto).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  exibirErro(e) {\n    this.exibirMensagem(\"Erro!!!\", 'Não foi possivel realizar a operação', 'toast-error');\n    return EMPTY;\n  }\n  exibirMensagem(titulo, mensagem, tipo) {\n    this.toastr.show(mensagem, titulo, {\n      closeButton: true,\n      progressBar: true\n    }, tipo);\n  }\n  abrirDetalhesProduto(id) {\n    this.router.navigate(['/produtos/detalhar-produto', id]);\n  }\n};\nProdutosService = __decorate([Injectable({\n  providedIn: 'root'\n})], ProdutosService);\nexport { ProdutosService };","map":{"version":3,"names":["Injectable","EMPTY","catchError","map","ProdutosService","constructor","http","toastr","router","URL","buscarTodos","get","pipe","retorno","erro","exibirErro","buscarPorId","id","cadastrar","produto","post","atualizar","put","e","exibirMensagem","titulo","mensagem","tipo","show","closeButton","progressBar","abrirDetalhesProduto","navigate","__decorate","providedIn"],"sources":["D:\\breno\\pessoal\\FrontEnd\\src\\app\\services\\produtos.service.ts"],"sourcesContent":["import { IProduto } from './../model/IProduto.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProdutosService {\r\n  private URL: string = 'http://localhost:3000/produtos';\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router) {}\r\n\r\n  buscarTodos(): Observable<IProduto[]>{\r\n    return this.http.get<IProduto[]>(this.URL).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  buscarPorId(id: number): Observable<IProduto>{\r\n    return this.http.get<IProduto>(`${this.URL}/${id}`).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  cadastrar(produto: IProduto): Observable<IProduto>{\r\n    return this.http.post<IProduto>(this.URL, produto).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  atualizar(produto: IProduto): Observable<IProduto>{\r\n    return this.http.put<IProduto>(`${this.URL}/${produto.id}`, produto).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  exibirErro(e: any):Observable<any> {\r\n    this.exibirMensagem(\"Erro!!!\", 'Não foi possivel realizar a operação', 'toast-error');\r\n    return EMPTY;\r\n\r\n  }\r\n  exibirMensagem(titulo:string, mensagem: string, tipo: string):void{\r\n    this.toastr.show(mensagem, titulo,{closeButton:true, progressBar:true}, tipo);\r\n  }\r\n\r\n  abrirDetalhesProduto(id: number): void {\r\n    this.router.navigate(['/produtos/detalhar-produto', id]);\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAoB,MAAM;AACxC,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;AAMvC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YAAoBC,IAAgB,EAAUC,MAAqB,EAAUC,MAAc;IAAvE,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAF3E,KAAAC,GAAG,GAAW,gCAAgC;EAEwC;EAE9FC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,IAAI,CAACF,GAAG,CAAC,CAACG,IAAI,CAC7CT,GAAG,CAACU,OAAO,IAAIA,OAAO,CAAC,EACvBX,UAAU,CAACY,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACX,IAAI,CAACK,GAAG,CAAW,GAAG,IAAI,CAACF,GAAG,IAAIQ,EAAE,EAAE,CAAC,CAACL,IAAI,CACtDT,GAAG,CAACU,OAAO,IAAIA,OAAO,CAAC,EACvBX,UAAU,CAACY,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAI,SAASA,CAACC,OAAiB;IACzB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAW,IAAI,CAACX,GAAG,EAAEU,OAAO,CAAC,CAACP,IAAI,CACrDT,GAAG,CAACU,OAAO,IAAIA,OAAO,CAAC,EACvBX,UAAU,CAACY,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAO,SAASA,CAACF,OAAiB;IACzB,OAAO,IAAI,CAACb,IAAI,CAACgB,GAAG,CAAW,GAAG,IAAI,CAACb,GAAG,IAAIU,OAAO,CAACF,EAAE,EAAE,EAAEE,OAAO,CAAC,CAACP,IAAI,CACvET,GAAG,CAACU,OAAO,IAAIA,OAAO,CAAC,EACvBX,UAAU,CAACY,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAC,UAAUA,CAACQ,CAAM;IACf,IAAI,CAACC,cAAc,CAAC,SAAS,EAAE,sCAAsC,EAAE,aAAa,CAAC;IACrF,OAAOvB,KAAK;EAEd;EACAuB,cAAcA,CAACC,MAAa,EAAEC,QAAgB,EAAEC,IAAY;IAC1D,IAAI,CAACpB,MAAM,CAACqB,IAAI,CAACF,QAAQ,EAAED,MAAM,EAAC;MAACI,WAAW,EAAC,IAAI;MAAEC,WAAW,EAAC;IAAI,CAAC,EAAEH,IAAI,CAAC;EAC/E;EAEAI,oBAAoBA,CAACd,EAAU;IAC7B,IAAI,CAACT,MAAM,CAACwB,QAAQ,CAAC,CAAC,4BAA4B,EAAEf,EAAE,CAAC,CAAC;EAC1D;CACD;AA7CYb,eAAe,GAAA6B,UAAA,EAH3BjC,UAAU,CAAC;EACVkC,UAAU,EAAE;CACb,CAAC,C,EACW9B,eAAe,CA6C3B;SA7CYA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}